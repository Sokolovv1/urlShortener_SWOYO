// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go
//
// Generated by this command:
//
//	mockgen -source=shortener.go -destination=../../mocks/shortener_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	model "urlShortener/internal/model"

	gomock "go.uber.org/mock/gomock"
)

// MockSwapRepository is a mock of SwapRepository interface.
type MockSwapRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSwapRepositoryMockRecorder
}

// MockSwapRepositoryMockRecorder is the mock recorder for MockSwapRepository.
type MockSwapRepositoryMockRecorder struct {
	mock *MockSwapRepository
}

// NewMockSwapRepository creates a new mock instance.
func NewMockSwapRepository(ctrl *gomock.Controller) *MockSwapRepository {
	mock := &MockSwapRepository{ctrl: ctrl}
	mock.recorder = &MockSwapRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwapRepository) EXPECT() *MockSwapRepositoryMockRecorder {
	return m.recorder
}

// CheckDublicate mocks base method.
func (m *MockSwapRepository) CheckDublicate(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDublicate", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDublicate indicates an expected call of CheckDublicate.
func (mr *MockSwapRepositoryMockRecorder) CheckDublicate(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDublicate", reflect.TypeOf((*MockSwapRepository)(nil).CheckDublicate), ctx, originalURL)
}

// CreateShortURL mocks base method.
func (m *MockSwapRepository) CreateShortURL(ctx context.Context, id int, shortURL, originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, id, shortURL, originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockSwapRepositoryMockRecorder) CreateShortURL(ctx, id, shortURL, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockSwapRepository)(nil).CreateShortURL), ctx, id, shortURL, originalURL)
}

// GetNextID mocks base method.
func (m *MockSwapRepository) GetNextID(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextID", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextID indicates an expected call of GetNextID.
func (mr *MockSwapRepositoryMockRecorder) GetNextID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextID", reflect.TypeOf((*MockSwapRepository)(nil).GetNextID), ctx)
}

// GetOriginalURL mocks base method.
func (m *MockSwapRepository) GetOriginalURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockSwapRepositoryMockRecorder) GetOriginalURL(ctx, shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockSwapRepository)(nil).GetOriginalURL), ctx, shortURL)
}

// MockShortenerServiceInterface is a mock of ShortenerServiceInterface interface.
type MockShortenerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerServiceInterfaceMockRecorder
}

// MockShortenerServiceInterfaceMockRecorder is the mock recorder for MockShortenerServiceInterface.
type MockShortenerServiceInterfaceMockRecorder struct {
	mock *MockShortenerServiceInterface
}

// NewMockShortenerServiceInterface creates a new mock instance.
func NewMockShortenerServiceInterface(ctrl *gomock.Controller) *MockShortenerServiceInterface {
	mock := &MockShortenerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockShortenerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerServiceInterface) EXPECT() *MockShortenerServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockShortenerServiceInterface) CreateShortURL(ctx context.Context, url string) (*model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", ctx, url)
	ret0, _ := ret[0].(*model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockShortenerServiceInterfaceMockRecorder) CreateShortURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockShortenerServiceInterface)(nil).CreateShortURL), ctx, url)
}

// GetOriginalURL mocks base method.
func (m *MockShortenerServiceInterface) GetOriginalURL(ctx context.Context, url string) (*model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, url)
	ret0, _ := ret[0].(*model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockShortenerServiceInterfaceMockRecorder) GetOriginalURL(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockShortenerServiceInterface)(nil).GetOriginalURL), ctx, url)
}
